;    1: PROGRAM eratosthenes(output);
	.stk	1024
	.cod
STATIC_LINK			.equ	+4
RETURN_VALUE		.equ	-4
HIGH_RETURN_VALUE	.equ	-2
;    2: 
;    3: CONST
;    4:     max = 1000;
;    5: 
;    6: VAR
;    7:     sieve : ARRAY [1..max] OF BOOLEAN;
;    8:     i, j, limit, prime, factor : INTEGER;
;    9:     
;   10: BEGIN
_pc65_main	.sub
	phx.w
	tsx.w
;   11:     limit := max DIV 2;
	psh.w #1000
	psh.w #2
	jsr _idiv
	adj #4
	sta.w limit_005
;   12:     sieve[1] := FALSE;
	psh.w #sieve_002
	lda #1
	dec.w a
	asl.w a
	clc
	adc.w 0,S
	tai
	lda #0
	sta.w (0,I++)
;   13:     
;   14:     FOR i := 2 TO max DO
	lda #2
	sta.w i_003
L_008
    lda.w #1000
	cmp.w i_003
	bge L_009
	jmp L_010
L_009
;   15:         sieve[i] := TRUE;
	psh.w #sieve_002
	lda.w i_003
	dec.w a
	asl.w a
	clc
	adc.w 0,S
	tai
	lda #1
	sta.w (0,I++)
    inc.w i_003
	jmp L_008
L_010
	dec.w i_003
;   16: 
;   17:     prime := 1;
	lda #1
	sta.w prime_006
;   18: 
;   19:     REPEAT
L_011
;   20:         prime := (((prime * 2 + 1) - 1) DIV 2) + 1;
	psh.w prime_006
	psh.w #2
	jsr _imul
	adj #4
	pha.w
	lda #1
	clc
	adc.w 0,S
	pha.w
	lda #1
	xma.w 0,S
	sec
	sbc.w 0,S
	pha.w
	psh.w #2
	jsr _idiv
	adj #4
	pha.w
	lda #1
	clc
	adc.w 0,S
	sta.w prime_006
;   21:         WHILE NOT sieve[prime] DO
L_013
	psh.w #sieve_002
	lda.w prime_006
	dec.w a
	asl.w a
	clc
	adc.w 0,S
	tai
	lda.w (0,I++)
	eor #1
	cmp.w #1
	beq L_014
	jmp L_015
L_014
;   22:             prime := prime + 1;
	psh.w prime_006
	lda #1
	clc
	adc.w 0,S
	sta.w prime_006
	jmp L_013
L_015
;   23: 
;   24:         factor := 2*prime;
	psh.w #2
	psh.w prime_006
	jsr _imul
	adj #4
	sta.w factor_007
;   25: 
;   26:         WHILE factor <= max DO BEGIN
L_016
	psh.w factor_007
	lda.w #1000
	xma.w 0,S
	cmp.w 0,S
	php
	lda #1
	plp
	ble L_019
	lda #0
L_019
	cmp.w #1
	beq L_017
	jmp L_018
L_017
;   27:             sieve[factor] := FALSE;
	psh.w #sieve_002
	lda.w factor_007
	dec.w a
	asl.w a
	clc
	adc.w 0,S
	tai
	lda #0
	sta.w (0,I++)
;   28:             factor := factor + prime;
	psh.w factor_007
	lda.w prime_006
	clc
	adc.w 0,S
	sta.w factor_007
;   29:         END
;   30:     UNTIL prime > limit;
	jmp L_016
L_018
	psh.w prime_006
	lda.w limit_005
	xma.w 0,S
	cmp.w 0,S
	php
	lda #1
	plp
	bgt L_020
	lda #0
L_020
	cmp.w #1
	beq L_012
	jmp L_011
L_012
;   31: 
;   32:     writeln('Sieve of Eratosthenes');
	psh.w #S_021
	psh.w #0
	psh.w #21
	jsr _swrite
	adj #6
	jsr _writeln
;   33:     writeln;
	jsr _writeln
;   34: 
;   35:     i := 1;
	lda #1
	sta.w i_003
;   36:     REPEAT
L_022
;   37:         FOR j := 0 TO 19 DO BEGIN
	lda #0
	sta.w j_004
L_024
	lda #19
	cmp.w j_004
	bge L_025
	jmp L_026
L_025
;   38:             prime := i + j;
	psh.w i_003
	lda.w j_004
	clc
	adc.w 0,S
	sta.w prime_006
;   39:             IF sieve[prime] THEN
	psh.w #sieve_002
	lda.w prime_006
	dec.w a
	asl.w a
	clc
	adc.w 0,S
	tai
	lda.w (0,I++)
	cmp.w #1
	beq L_027
	jmp  L_028
L_027
;   40:                 write(prime:3)
	psh.w prime_006
	psh.w #3
	jsr _iwrite
	adj #4
;   41:             ELSE
	jmp L_029
L_028
;   42:                 write('   ');
	psh.w #S_030
	psh.w #0
	psh.w #3
	jsr _swrite
	adj #6
L_029
;   43:         END;
	inc.w j_004
	jmp L_024
L_026
	dec.w j_004
;   44:         writeln;
	jsr _writeln
;   45:         i := i + 20
	lda.w i_003
	pha.w
	lda #20
;   46:     UNTIL i > max
	clc
	adc.w 0,S
	sta.w i_003
	lda.w i_003
	pha.w
;   47: END.
	lda.w #1000
	xma.w 0,S
	cmp.w 0,S
	php
	lda #1
	plp
	bgt L_031
	lda #0
L_031
	cmp.w #1
	beq L_023
	jmp L_022
L_023
	plx.w
	rts
	.end	_pc65_main

	.dat

sieve_002	.byt	2000
i_003	.byt	2
j_004	.byt	2
limit_005	.byt	2
prime_006	.byt	2
factor_007	.byt	2
S_030	.str	"   "
S_021	.str	"Sieve of Eratosthenes"

	.end
;
;   Comments - Optimization Pass 1
;
;   In this pass, one assumption is that the stack-relative addressing mode is
;   reserved for direct access to the top of the system stack, and that accesses
;   to that element of the system stack results in the automatic popping of the
;   operand held at the position in the system stack. No provision to prevent
;   the popping, i.e. auto-increment of the system stack pointer, is provided if
;   the offset into the system stack is not to the top of stack position, i.e.
;   offset > 1. With this limitation in mind for the stack-relative addressing
;   mode, it may be prudent to consider using an offset of 0 to enable the auto-
;   matic popping of the top of stack, which would normally have an offset of 0,
;   so that positive offsets can be used to access operands in the system stack
;   without adjusting the stack pointer automatically and having a side-effect
;   that potentially orphans the operand in the top of stack position. Using 0
;   offset to automatically enable the popping of the top of stack position
;   would require that a proper offset of 1 be fed into the address generator.
;   Therefore, this pass assumes that automatic popping of the system stack is
;   the desired behavior and that an offset of 0 is used to enable this behavior
;   beyond the addition of the prefix instructions required to form the stack-
;   relative addressing mode.
;
;   Continuing with the assumptions, it is further assumed that the IP register
;   and LDA/STA (ip,I++) indirect addressing mode instructions have been used
;   to implement register indirect loads of operands and stores of results.
;
;   With those two assumptions about the behavior of the instruction set and the
;   code generator, the peephole optimization performed in this pass is that
;   immediate and absolute addressing mode operand loads into the accumulator
;   followed by word pushes to the system stack, are converted into push opera-
;   tions:
;
;       lda #imm;  pha.w ==> psh.w #imm16
;       lda.w abs; pha.w ==> psh.w abs
;
